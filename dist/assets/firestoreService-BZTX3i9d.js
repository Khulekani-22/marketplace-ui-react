import{d as M,c as h,m,n as K,q as p,w as f,o as L,l as Q,b as Y,u as ot,p as nt,r as st,t as ct,f as at,v as it}from"./firebase-CoDMjCGl.js";import{d as a}from"./index-AR0poqkx.js";class lt{async getCollection(r){try{const t=await M(h(a,r)),e=[];return t.forEach(o=>{e.push({id:o.id,...o.data()})}),e}catch(t){throw console.error(`Error fetching ${r}:`,t),t}}async getDocument(r,t){try{const e=m(a,r,t),o=await K(e);return o.exists()?{id:o.id,...o.data()}:null}catch(e){throw console.error(`Error fetching document ${t} from ${r}:`,e),e}}async queryCollection(r,t=[],e=null,o=null){try{let n=h(a,r);if(t.forEach(({field:u,operator:y,value:l})=>{n=p(n,f(u,y,l))}),e){const{field:u,direction:y="asc"}=e;n=p(n,L(u,y))}o&&(n=p(n,Q(o)));const i=await M(n),s=[];return i.forEach(u=>{s.push({id:u.id,...u.data()})}),s}catch(n){throw console.error(`Error querying ${r}:`,n),n}}async addDocument(r,t){try{return{id:(await Y(h(a,r),{...t,createdAt:new Date,updatedAt:new Date})).id,...t}}catch(e){throw console.error(`Error adding document to ${r}:`,e),e}}async updateDocument(r,t,e){try{const o=m(a,r,t);return await ot(o,{...e,updatedAt:new Date}),{id:t,...e}}catch(o){throw console.error(`Error updating document ${t} in ${r}:`,o),o}}async deleteDocument(r,t){try{const e=m(a,r,t);return await nt(e),!0}catch(e){throw console.error(`Error deleting document ${t} from ${r}:`,e),e}}async getServices({category:r=null,vendor:t=null,minPrice:e=null,maxPrice:o=null,featured:n=null,search:i=null,tenantId:s=null,page:u=1,pageSize:y=20,cursor:l=null,sortBy:P=null,includeTotal:Z=!0}={}){try{const D=h(a,"services"),d=[];if(r&&d.push(f("category","==",r)),t&&d.push(f("vendor","==",t)),s){const c=s==="vendor"?"public":s;d.push(f("tenantId","==",c))}n!==null&&d.push(f("featured","==",!!n));const k=e!==null?Number(e):null,x=o!==null?Number(o):null,T=k!==null||x!==null;k!==null&&d.push(f("price",">=",k)),x!==null&&d.push(f("price","<=",x));const N=T?"price":"createdAt",I=T?"price":P?.field||N,tt=(P?.direction||(T?"asc":"desc"))==="asc"?"asc":"desc",et=[L(I,tt)],w=Math.max(1,Number(y)||20),U=Math.max(1,Number(u)||1),j=w+1,H=10,F=typeof i=="string"&&i.trim()?i.trim().toLowerCase():null,C=l?0:(U-1)*w,O=C+w;let A=null;if(l){if(typeof l=="object"&&l.id)A=l;else if(typeof l=="string"){const c=await K(m(a,"services",l));c.exists()?A=c:console.warn(`[FirestoreService] Invalid cursor received: ${l}`)}}const V=Z&&!F?st(p(D,...d)).catch(c=>(console.warn("[FirestoreService] Count query failed",c),null)):null,b=[];let q=A,W=0,v=!1,R=A;for(;b.length<O&&W<H;){W+=1;const c=[...d,...et];R&&c.push(ct(R)),c.push(Q(j));const g=await M(p(D,...c));if(g.empty)break;const $=g.docs,J=$.length===j;if(v=v||J,$.forEach(z=>{const S={id:z.id,...z.data()};F&&![S.title,S.description,S.vendor,S.category].filter(Boolean).map(B=>String(B).toLowerCase()).some(B=>B.includes(F))||b.push({doc:z,data:S})}),q=$[$.length-1],R=q,!J)break}b.length>O&&(v=!0),W>=H&&R&&(v=!0);const E=b.slice(C,C+w),X=E.length?E[E.length-1].doc:q,_=!!(b.length>C+w||v&&q),rt=_&&X?X.id:null;let G=E.length;if(V){const c=await V;if(c){const g=c.data();g&&typeof g.count=="number"&&(G=g.count)}}return{page:U,pageSize:w,total:G,items:E.map(c=>c.data),hasMore:_,nextCursor:rt}}catch(D){throw console.error("Error fetching services:",D),D}}async getUserServices(r,t){try{const e=[];return r?e.push({field:"ownerUid",operator:"==",value:r}):t&&e.push({field:"contactEmail",operator:"==",value:t}),await this.queryCollection("services",e)}catch(e){throw console.error("Error fetching user services:",e),e}}subscribeToCollection(r,t,e=[]){try{let o=h(a,r);return e.forEach(({field:n,operator:i,value:s})=>{o=p(o,f(n,i,s))}),at(o,n=>{const i=[];n.forEach(s=>{i.push({id:s.id,...s.data()})}),t(i)})}catch(o){throw console.error(`Error subscribing to ${r}:`,o),o}}async batchWrite(r){try{const t=it(a);return r.forEach(({type:e,collectionName:o,docId:n,data:i})=>{const s=n?m(a,o,n):m(h(a,o));switch(e){case"set":t.set(s,{...i,updatedAt:new Date});break;case"update":t.update(s,{...i,updatedAt:new Date});break;case"delete":t.delete(s);break}}),await t.commit(),!0}catch(t){throw console.error("Error in batch write:",t),t}}async getWalletWithTransactions(r){try{const t=await this.getDocument("wallets",r);if(t){const e=await M(p(h(a,"wallets",r,"transactions"),L("createdAt","desc"))),o=[];return e.forEach(n=>{o.push({id:n.id,...n.data()})}),{...t,transactions:o}}return null}catch(t){throw console.error("Error fetching wallet with transactions:",t),t}}async addTransaction(r,t){try{return{id:(await Y(h(a,"wallets",r,"transactions"),{...t,createdAt:new Date,updatedAt:new Date})).id,...t}}catch(e){throw console.error("Error adding transaction:",e),e}}}const ut=new lt,{getCollection:mt,getDocument:yt,queryCollection:Dt,addDocument:bt,updateDocument:vt,deleteDocument:Et,getServices:St,getUserServices:Ct,subscribeToCollection:At,batchWrite:qt,getWalletWithTransactions:Rt,addTransaction:$t}=ut;export{ut as f};
